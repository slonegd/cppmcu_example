/**
 * 21 объекты вместо статических классов
 **/

#include "defines.h"
#include "stm32f0xx.h"
#include "pin.h"
#include "timers.h"

// в предыдущей части компилятор не мог оптимизировать инициализацию
// потому было решено сделать шаблонным конструктор, чтобы подсказать
// компилятору, что не нужно компилировать с помощью if constexpr
// Но тогда я не знал, что шаблонных конструкторов не существует
// Для выхода из этого положения делаем шаблонный статический метод-фабрику
// , которая сконструирует нужный объект, проиницализирует его по параметрам шаблона
// и вернёт готовый объект

// сначала см RCC.h

// результат компиляции -0s = 1104 байта
// , такой же, как и для варианта со статическими шаблонными классами
// , но тут плюсы:
//    не забудешь проиницализировать
//    не надо передавать тип пина в качестве параметра шаблона
// минусы:
//    потеряна некоторая метаинформация вне фабричного метода
//    , но пока это никак не влияет на работу, надо смотреть, что будет дальше
//       с более сложной переферией


int main(void)
{
   auto blueled  { Pin::make<Periph::PC, 8, PinMode::Output>() };
   auto greenled { Pin::make<Periph::PC, 9, PinMode::Output>() };
   auto none     { Pin::make<Periph::PA, 9, PinMode::Input>()  };


   CyclicTask<200> _200ms;
   CyclicTask<300> _300ms;

   while (1)
   {
      _200ms([&]() {  blueled.toggle(); });
      _300ms([&]() { greenled.toggle(); });

      // делать в этом цикле пока нечего, потому спим до прерывания
      __WFI();
   }
}
